<?php
use errors\ColorschemeTooLarge;
System::RequireColorschemes();
/**
 * Process the form generated by defaultcolorschemesetunique1, to set the unique-value scheme.
 * @package Dispatchers
 */
/**
  */
function _config_colorschemesetunique2() {
	$config = Array();
	// Start config
	// Stop config
	return $config;
}

function _dispatch_colorschemesetunique2($template, $args) {
$world = $args['world'];
$user = $args['user'];
$ini = System::GetIni();
// load the layer and verify their access
$layer = $world->getLayerById($_REQUEST['id']);
if (!$layer or $layer->getPermissionById($user->id) < AccessLevels::EDIT) {
   print javascriptalert('You do not have permission to edit that Layer.');
   return print redirect('layer.list');
}

// setting them is easy, but very wasteful
// In order to properly complain about the colorscheme being too large, we have to generate it
// and then compare it with the max. Only then can we decide whether to generate-and0save or to bail.
$ruleset = $layer->colorscheme->generateUnique($_REQUEST['column'],$_REQUEST['schemenumber'],$_REQUEST['schemename']);
if (sizeof($ruleset) <= $ini->max_colorclasses) {
   $layer->colorscheme->setSchemeToUnique($_REQUEST['column'],$_REQUEST['schemenumber'],$_REQUEST['schemename']);
}
else {
	$error = new ColorschemeTooLarge();
	print javascriptalert($error->getMessage());
	
   
}

// all done
print redirect("default.colorscheme&id={$layer->id}");
}?>