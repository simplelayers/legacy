<?php
/**
 * Process the form generated by defaultcolorschemeedit1, to save the changes to the color scheme entry.
 * @package Dispatchers
 */
/**
  */
function _config_colorschemeedit2() {
	$config = Array();
	// Start config
	// Stop config
	return $config;
}

function _dispatch_colorschemeedit2($template, $args) {
$world = $args['world'];
$user = $args['user'];

// load the layer and verify their access
$layer = $world->getLayerById($_REQUEST['id']);
if (!$layer or $layer->getPermissionById($user->id) < AccessLevels::EDIT) {
   print javascriptalert('You do not have permission to edit that Layer.');
   return print redirect('layer.list');
}


// fetch the rule, and assign its new attributes
$entry = $layer->colorscheme->getEntryByid($_REQUEST['cid']);

if ($entry) {
   $entry->description  = $_REQUEST['description'];
   $entry->stroke_color = $_REQUEST['stroke_color'];
   $entry->fill_color   = RequestUtil::Get('fill_color',$entry->stroke_color);
   $entry->symbol       = $_REQUEST['symbol'];
   $entry->symbol_size  = $_REQUEST['symbol_size'];
   $entry->criteria1    = $_REQUEST['criteria1'];
   $entry->criteria2    = $_REQUEST['criteria2'];
   $entry->criteria3    = $_REQUEST['criteria3'];
   $entry->stroke_color = $_REQUEST['stroke_color'];
}

#die("?do=default.colorschemeedit1&id={$layer->id}");
// easy, huh?
print redirect("default.colorscheme&id={$layer->id}");
die();

}?>